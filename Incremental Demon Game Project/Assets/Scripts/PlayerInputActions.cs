//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""NavigateDefaultUI"",
            ""id"": ""d51ea264-0db1-452f-bbc7-b359fcb85727"",
            ""actions"": [
                {
                    ""name"": ""PressPosition"",
                    ""type"": ""Value"",
                    ""id"": ""bb5af798-d0ad-4149-9a9d-2d0dbba779ea"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrimaryPress"",
                    ""type"": ""Button"",
                    ""id"": ""a3a2b6e4-67d2-431b-bbea-3e1dc7048303"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f82d9c14-e716-4776-a84c-ce6e1d771f5c"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PressPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4f7b364-3f86-4723-b77a-29adb92e2285"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PressPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ed4a279-10fb-4f07-adf9-a2b842426bcd"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65d4e7f6-ecb3-4c3d-b941-598bfcb0388e"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // NavigateDefaultUI
        m_NavigateDefaultUI = asset.FindActionMap("NavigateDefaultUI", throwIfNotFound: true);
        m_NavigateDefaultUI_PressPosition = m_NavigateDefaultUI.FindAction("PressPosition", throwIfNotFound: true);
        m_NavigateDefaultUI_PrimaryPress = m_NavigateDefaultUI.FindAction("PrimaryPress", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // NavigateDefaultUI
    private readonly InputActionMap m_NavigateDefaultUI;
    private List<INavigateDefaultUIActions> m_NavigateDefaultUIActionsCallbackInterfaces = new List<INavigateDefaultUIActions>();
    private readonly InputAction m_NavigateDefaultUI_PressPosition;
    private readonly InputAction m_NavigateDefaultUI_PrimaryPress;
    public struct NavigateDefaultUIActions
    {
        private @PlayerInputActions m_Wrapper;
        public NavigateDefaultUIActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PressPosition => m_Wrapper.m_NavigateDefaultUI_PressPosition;
        public InputAction @PrimaryPress => m_Wrapper.m_NavigateDefaultUI_PrimaryPress;
        public InputActionMap Get() { return m_Wrapper.m_NavigateDefaultUI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NavigateDefaultUIActions set) { return set.Get(); }
        public void AddCallbacks(INavigateDefaultUIActions instance)
        {
            if (instance == null || m_Wrapper.m_NavigateDefaultUIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NavigateDefaultUIActionsCallbackInterfaces.Add(instance);
            @PressPosition.started += instance.OnPressPosition;
            @PressPosition.performed += instance.OnPressPosition;
            @PressPosition.canceled += instance.OnPressPosition;
            @PrimaryPress.started += instance.OnPrimaryPress;
            @PrimaryPress.performed += instance.OnPrimaryPress;
            @PrimaryPress.canceled += instance.OnPrimaryPress;
        }

        private void UnregisterCallbacks(INavigateDefaultUIActions instance)
        {
            @PressPosition.started -= instance.OnPressPosition;
            @PressPosition.performed -= instance.OnPressPosition;
            @PressPosition.canceled -= instance.OnPressPosition;
            @PrimaryPress.started -= instance.OnPrimaryPress;
            @PrimaryPress.performed -= instance.OnPrimaryPress;
            @PrimaryPress.canceled -= instance.OnPrimaryPress;
        }

        public void RemoveCallbacks(INavigateDefaultUIActions instance)
        {
            if (m_Wrapper.m_NavigateDefaultUIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INavigateDefaultUIActions instance)
        {
            foreach (var item in m_Wrapper.m_NavigateDefaultUIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NavigateDefaultUIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NavigateDefaultUIActions @NavigateDefaultUI => new NavigateDefaultUIActions(this);
    public interface INavigateDefaultUIActions
    {
        void OnPressPosition(InputAction.CallbackContext context);
        void OnPrimaryPress(InputAction.CallbackContext context);
    }
}
